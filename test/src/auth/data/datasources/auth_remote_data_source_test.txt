import 'package:clean_architecture_tdd_flutter_template/core/enums/update_user_action.dart';
import 'package:clean_architecture_tdd_flutter_template/src/auth/data/datasources/auth_remote_data_source.dart';
import 'package:fake_cloud_firestore/fake_cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_auth_mocks/firebase_auth_mocks.dart';
import 'package:firebase_storage_mocks/firebase_storage_mocks.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:google_sign_in_mocks/google_sign_in_mocks.dart';

void main() async {
  late FakeFirebaseFirestore cloudStoreClient;
  late MockFirebaseAuth authClient;
  late MockFirebaseStorage dbClient;
  late AuthRemoteDataSource dataSource;

  // Mock sign in with Google.
  setUp(() async {
    cloudStoreClient = FakeFirebaseFirestore();
    final googleSignIn = MockGoogleSignIn();
    final signinAccount = await googleSignIn.signIn();
    final googleAuth = await signinAccount!.authentication;
    final AuthCredential credential = GoogleAuthProvider.credential(
      accessToken: googleAuth.accessToken,
      idToken: googleAuth.idToken,
    );
    // Sign in.
    final mockUser = MockUser(
      uid: 'someuid',
      email: 'bob@somedomain.com',
      displayName: 'username',
    );
    authClient = MockFirebaseAuth(mockUser: mockUser);
    final result = await authClient.signInWithCredential(credential);
    final user = result.user;
    dbClient = MockFirebaseStorage();

    dataSource = AuthRemoteDataSourceImpl(
      authClient: authClient,
      cloudStoreClient: cloudStoreClient,
      dbClient: dbClient,
    );
  });

  const tName = 'name';
  const tUsername = 'username';
  const tPassword = 'password';
  const tEmail = 'email@example.com';

  test('signUp', () async {
    await dataSource.signUp(
      name: tName,
      username: tUsername,
      email: tEmail,
      password: tPassword,
    );

    expect(authClient.currentUser, isNotNull);
    expect(authClient.currentUser!.email, tEmail);

    final user = await cloudStoreClient
        .collection('users')
        .doc(authClient.currentUser!.uid)
        .get();

    expect(user.exists, true);
  });

  test('signIn', () async {
    await dataSource.signUp(
      name: tName,
      username: 'newUsername',
      email: 'newEmail@example.com',
      password: tPassword,
    );
    await authClient.signOut();
    await dataSource.signIn(
      username: 'newUsername',
      password: tPassword,
    );

    expect(authClient.currentUser, isNotNull);
    expect(authClient.currentUser!.email, equals('newEmail@example.com'));
  });

  group('updateUser', () {
    test('displayName', () async {
      await dataSource.signUp(
        name: tName,
        username: tUsername,
        email: tEmail,
        password: tPassword,
      );

      await dataSource.updateUser(
        action: UpdateUserAction.name,
        userData: 'newUsername',
      );

      expect(authClient.currentUser, isNotNull);
      expect(authClient.currentUser!.displayName, 'newUsername');
    });

    test('email', () async {
      // await dataSource.signUp(
      //   name: tName,
      //   username: tUsername,
      //   email: tEmail,
      //   password: tPassword,
      // );

      await dataSource.updateUser(
        action: UpdateUserAction.email,
        userData: 'newEmail@example.com',
      );

      expect(authClient.currentUser, isNotNull);
      expect(authClient.currentUser!.email, 'newEmail@example.com');
    });
  });
}
